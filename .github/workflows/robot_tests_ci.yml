name: ROBOT_TESTS_CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  robot-tests:
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.runCommand({ ping:1 })'" --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      BACK_REPO_URL: https://github.com/juniorschmitz/cinema-challenge-back
      FRONT_REPO_URL: https://github.com/juniorschmitz/cinema-challenge-front
      MONGODB_URI: mongodb://localhost:27017/cinema-app
      BACKEND_PORT: 3000
      FRONTEND_PORT: 3002

    steps:
    - name: üîé Validate required environment variables
      run: |
        echo "Validando vari√°veis de ambiente necess√°rias..."
        REQUIRED_VARS=(
          BACK_REPO_URL
          FRONT_REPO_URL
          MONGODB_URI
          BACKEND_PORT
          FRONTEND_PORT
        )
        MISSING=0
        for VAR in "${REQUIRED_VARS[@]}"; do
          if [ -z "${!VAR}" ]; then
            echo "‚ùå Vari√°vel obrigat√≥ria n√£o definida: $VAR"
            MISSING=1
          else
            echo "‚úÖ $VAR = ${!VAR}"
          fi
        done
        # Validar secret do Gemini para as pr√≥ximas pipelines
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚ö†Ô∏è Aten√ß√£o: O secret GEMINI_API_KEY n√£o est√° configurado. A an√°lise de criticidade n√£o funcionar√°."
        else
          echo "‚úÖ Secret GEMINI_API_KEY est√° configurado."
        fi
        if [ $MISSING -eq 1 ]; then
          echo "‚ùå Corrija as vari√°veis de ambiente antes de continuar."
          exit 1
        fi

    - name: Checkout test repository
      uses: actions/checkout@v4

    - name: Clone Backend repository
      run: git clone $BACK_REPO_URL cinema-challenge-back

    - name: Install Backend dependencies
      run: |
        cd cinema-challenge-back
        npm ci

    - name: Create .env file for Backend
      run: |
        cd cinema-challenge-back
        echo "MONGODB_URI=${MONGODB_URI}" >> .env
        echo "PORT=${BACKEND_PORT}" >> .env
        echo "JWT_SECRET=secret_key" >> .env

    - name: Start Backend and capture log
      run: |
        cd cinema-challenge-back
        npm start > backend.log 2>&1 &

    - name: Wait for Backend to be ready
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:${BACKEND_PORT}/api/v1/status >/dev/null; then
            echo "Backend is up!"
            exit 0
          fi
          echo "Waiting for backend..."
          sleep 2
          cat cinema-challenge-back/backend.log || true
        done
        echo "Backend did not respond in time."
        exit 1

    - name: Clone Frontend repository
      run: git clone $FRONT_REPO_URL cinema-challenge-front

    - name: Install Frontend dependencies
      run: |
        cd cinema-challenge-front
        npm ci

    - name: Create .env.local file for Frontend
      run: |
        cd cinema-challenge-front
        echo "VITE_API_URL=/api/v1" >> .env.local
        echo "VITE_APP_ENV=development" >> .env.local
        echo "VITE_ENABLE_MOCK_API=false" >> .env.local
        echo "VITE_ENABLE_ANALYTICS=false" >> .env.local

    - name: Start Frontend and capture log
      run: |
        cd cinema-challenge-front
        npm run dev -- --host 0.0.0.0 --port ${FRONTEND_PORT} > frontend.log 2>&1 &

    - name: Wait for Frontend to be ready
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:${FRONTEND_PORT} >/dev/null; then
            echo "Frontend is up!"
            exit 0
          fi
          echo "Waiting for frontend..."
          sleep 2
          cat cinema-challenge-front/frontend.log || true
        done
        echo "Frontend did not respond in time."
        exit 1

    - name: Set up Python and Robot Framework
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Robot Framework dependencies
      run: |
        pip install -r requirements.txt
        rfbrowser init

    - name: Install xvfb
      run: sudo apt-get update && sudo apt-get install -y xvfb

    - name: Make script executable
      run: chmod +x run_tests_ci.sh

    - name: Run Robot Framework tests with xvfb and screenshots
      run: |
        mkdir -p results
        xvfb-run --auto-servernum ./run_tests_ci.sh

    - name: Upload Robot Test Reports and Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: robot-test-reports
        path: results

    # Steps de Deploy e An√°lise de Criticidade
    - name: ‚öôÔ∏è Configure Pages
      if: always()
      uses: actions/configure-pages@v5

    - name: üè† Create index.html for navigation
      if: always()
      run: |
        echo "üìÑ Criando index.html para navega√ß√£o..."
        cat > results/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Relat√≥rios de Testes Robot Framework</title>
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .container { 
                    max-width: 900px; 
                    margin: 0 auto; 
                    background: white; 
                    padding: 40px; 
                    border-radius: 15px; 
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                }
                h1 { 
                    color: #333; 
                    text-align: center; 
                    margin-bottom: 30px; 
                    font-size: 2.5em;
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                }
                .status-badge {
                    display: inline-block;
                    padding: 8px 16px;
                    border-radius: 20px;
                    font-size: 14px;
                    font-weight: bold;
                    margin-bottom: 20px;
                }
                .success { background: #d4edda; color: #155724; border: 2px solid #c3e6cb; }
                .warning { background: #fff3cd; color: #856404; border: 2px solid #ffeaa7; }
                .file-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .file-card {
                    background: #f8f9fa;
                    border: 2px solid #e9ecef;
                    border-radius: 10px;
                    padding: 20px;
                    transition: all 0.3s ease;
                    text-decoration: none;
                    color: inherit;
                    display: block;
                }
                .file-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                    border-color: #667eea;
                }
                .file-card h3 {
                    margin: 0 0 10px 0;
                    color: #333;
                    font-size: 1.2em;
                }
                .file-card p {
                    margin: 0;
                    color: #666;
                    font-size: 0.9em;
                }
                .file-icon {
                    font-size: 2em;
                    margin-bottom: 10px;
                    display: block;
                }
                .screenshots-section {
                    background: #fff;
                    border: 2px solid #e9ecef;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 20px 0;
                }
                .screenshots-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                    gap: 15px;
                    margin-top: 15px;
                }
                .screenshot-item {
                    text-align: center;
                    padding: 10px;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    background: #f8f9fa;
                    transition: all 0.3s ease;
                }
                .screenshot-item:hover {
                    transform: scale(1.05);
                    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                }
                .screenshot-item img {
                    width: 100%;
                    height: 100px;
                    object-fit: cover;
                    border-radius: 5px;
                    margin-bottom: 8px;
                }
                .footer {
                    text-align: center;
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #e9ecef;
                    color: #666;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Relat√≥rios de Testes Robot Framework</h1>
                
                <div style="text-align: center;">
                    <span class="status-badge success">‚úÖ Relat√≥rios Dispon√≠veis</span>
                </div>
                
                <div class="file-grid">
                    <a href="report.html" class="file-card">
                        <span class="file-icon">üìä</span>
                        <h3>Relat√≥rio Principal</h3>
                        <p>Relat√≥rio detalhado com resultados dos testes executados</p>
                    </a>
                    
                    <a href="log.html" class="file-card">
                        <span class="file-icon">üìù</span>
                        <h3>Log Detalhado</h3>
                        <p>Log completo com todos os detalhes da execu√ß√£o dos testes</p>
                    </a>
                    
                    <a href="output.xml" class="file-card">
                        <span class="file-icon">üìÑ</span>
                        <h3>XML de Sa√≠da</h3>
                        <p>Dados brutos em formato XML para an√°lise t√©cnica</p>
                    </a>
                    
                    <a href="browser/screenshot/" class="file-card">
                        <span class="file-icon">üì∏</span>
                        <h3>Screenshots</h3>
                        <p>Capturas de tela durante a execu√ß√£o dos testes de frontend</p>
                    </a>
                    
                    <a href="criticality_analysis.html" class="file-card">
                        <span class="file-icon">üîç</span>
                        <h3>An√°lise de Criticidade</h3>
                        <p>An√°lise inteligente das falhas dos testes com Gemini AI</p>
                    </a>
                </div>
                
                <div class="screenshots-section">
                    <h3>üì∏ Screenshots Dispon√≠veis</h3>
                    <div class="screenshots-grid" id="screenshots-grid">
                        <!-- Screenshots ser√£o carregados dinamicamente -->
                    </div>
                </div>
                
                <div class="footer">
                    <p>üìÖ Gerado automaticamente pelo Robot Framework</p>
                    <p>üîÑ Atualizado a cada execu√ß√£o dos testes</p>
                </div>
            </div>
            
            <script>
                // Fun√ß√£o para carregar screenshots dinamicamente
                function loadScreenshots() {
                    const grid = document.getElementById('screenshots-grid');
                    const commonScreenshots = [
                        'test-1.png', 'test-2.png', 'test-3.png', 'test-4.png',
                        'test-5.png', 'test-6.png', 'test-7.png', 'test-8.png',
                        'test-9.png', 'test-10.png', 'test-11.png', 'test-12.png',
                        'CTW-015-sucesso-1.png', 'failure_1.png'
                    ];
                    
                    commonScreenshots.forEach((filename, index) => {
                        const item = document.createElement('div');
                        item.className = 'screenshot-item';
                        item.innerHTML = `
                            <img src="browser/screenshot/${filename}" 
                                 alt="Screenshot ${index + 1}" 
                                 onerror="this.parentElement.style.display='none'"
                                 onclick="window.open(this.src, '_blank')">
                            <div>${filename.replace('.png', '')}</div>
                        `;
                        grid.appendChild(item);
                    });
                }
                
                // Carregar screenshots quando a p√°gina carregar
                window.onload = loadScreenshots;
            </script>
        </body>
        </html>
        EOF

    - name: üìã List files for debugging
      if: always()
      run: |
        echo "üìÅ Arquivos dispon√≠veis:"
        ls -la results/ || echo "Diret√≥rio results n√£o existe"
        
        echo ""
        echo "üìä Screenshots encontrados:"
        find results/ -name "*.png" -o -name "*.jpg" | head -5 || echo "Nenhum screenshot encontrado"

    - name: üìä Extract test results for analysis
      if: always()
      run: |
        echo "üìä Extraindo resultados dos testes para an√°lise..."
        
        if [ ! -f results/report.html ]; then
          echo "‚ùå Arquivo report.html n√£o encontrado!"
          exit 1
        fi
        
        echo "üìÑ Estrutura do report.html:"
        echo "Tamanho do arquivo: $(wc -l < results/report.html) linhas"
        echo "Primeiras 10 linhas:"
        head -10 results/report.html
        echo ""
        echo "Buscando por padr√µes de estat√≠sticas..."
        grep -i "total\|pass\|fail\|skip\|statistics" results/report.html | head -5
        
        # Extrair estat√≠sticas dos testes com m√∫ltiplas estrat√©gias
        echo "üîç Analisando estrutura do report.html..."
        
        # Estrat√©gia 1: Buscar por padr√µes comuns no Robot Framework
        TOTAL_TESTS=$(grep -oP 'Total:\s*\K[0-9]+' results/report.html | head -1)
        PASSED_TESTS=$(grep -oP 'Pass:\s*\K[0-9]+' results/report.html | head -1)
        FAILED_TESTS=$(grep -oP 'Fail:\s*\K[0-9]+' results/report.html | head -1)
        SKIPPED_TESTS=$(grep -oP 'Skip:\s*\K[0-9]+' results/report.html | head -1)
        
        # Estrat√©gia 2: Se n√£o encontrou, buscar por outras varia√ß√µes
        if [ -z "$TOTAL_TESTS" ]; then
          TOTAL_TESTS=$(grep -oP 'tests="\K[0-9]+' results/report.html | head -1)
        fi
        if [ -z "$PASSED_TESTS" ]; then
          PASSED_TESTS=$(grep -oP 'pass="\K[0-9]+' results/report.html | head -1)
        fi
        if [ -z "$FAILED_TESTS" ]; then
          FAILED_TESTS=$(grep -oP 'fail="\K[0-9]+' results/report.html | head -1)
        fi
        if [ -z "$SKIPPED_TESTS" ]; then
          SKIPPED_TESTS=$(grep -oP 'skip="\K[0-9]+' results/report.html | head -1)
        fi
        
        # Estrat√©gia 3: Buscar por tabelas de estat√≠sticas
        if [ -z "$TOTAL_TESTS" ]; then
          TOTAL_TESTS=$(grep -A 10 -B 5 'Statistics' results/report.html | grep -oP '[0-9]+' | head -1)
        fi
        
        # Estrat√©gia 4: Contar manualmente se necess√°rio
        if [ -z "$TOTAL_TESTS" ]; then
          echo "üìä Contando testes manualmente..."
          TOTAL_TESTS=$(grep -c 'class="pass\|class="fail\|class="skip"' results/report.html || echo "0")
        fi
        if [ -z "$PASSED_TESTS" ]; then
          PASSED_TESTS=$(grep -c 'class="pass"' results/report.html || echo "0")
        fi
        if [ -z "$FAILED_TESTS" ]; then
          FAILED_TESTS=$(grep -c 'class="fail"' results/report.html || echo "0")
        fi
        if [ -z "$SKIPPED_TESTS" ]; then
          SKIPPED_TESTS=$(grep -c 'class="skip"' results/report.html || echo "0")
        fi
        
        # Valores padr√£o se n√£o encontrados
        TOTAL_TESTS=${TOTAL_TESTS:-0}
        PASSED_TESTS=${PASSED_TESTS:-0}
        FAILED_TESTS=${FAILED_TESTS:-0}
        SKIPPED_TESTS=${SKIPPED_TESTS:-0}
        
        echo "üìà Estat√≠sticas dos Testes:"
        echo "   Total: $TOTAL_TESTS"
        echo "   Passou: $PASSED_TESTS"
        echo "   Falhou: $FAILED_TESTS"
        echo "   Pulou: $SKIPPED_TESTS"
        
        # Salvar estat√≠sticas para uso posterior
        echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_ENV
        echo "PASSED_TESTS=$PASSED_TESTS" >> $GITHUB_ENV
        echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV
        echo "SKIPPED_TESTS=$SKIPPED_TESTS" >> $GITHUB_ENV
        
        # Extrair detalhes dos testes que falharam
        if [ "$FAILED_TESTS" -gt 0 ]; then
          echo "üîç Extraindo detalhes dos testes falhados..."
          cat > test_failures.txt << 'FAILURES_EOF'
          DETALHES DOS TESTES FALHADOS:
          =============================
          
          FAILURES_EOF
          grep -A 5 -B 5 'class="fail"' results/report.html | grep -E '<td|<tr' | head -20 >> test_failures.txt
          echo "" >> test_failures.txt
          echo "MENSAGENS DE ERRO:" >> test_failures.txt
          echo "==================" >> test_failures.txt
          grep -A 10 'class="fail"' results/report.html | grep -E '<td|</td>' | head -30 >> test_failures.txt
        fi

    - name: ü§ñ Analyze test failures with Gemini AI
      if: always() && env.FAILED_TESTS != '0' && env.FAILED_TESTS != '' && env.FAILED_TESTS != null
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "ü§ñ Analisando falhas com Gemini AI..."
        
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "‚ùå GEMINI_API_KEY n√£o configurada!"
          exit 1
        fi
        
        # Preparar prompt para an√°lise de criticidade
        cat > analysis_prompt.txt << EOF
        CONTEXTO: An√°lise de Criticidade de Testes Robot Framework
        
        ESTAT√çSTICAS DOS TESTES:
        - Total de testes: $TOTAL_TESTS
        - Testes que passaram: $PASSED_TESTS
        - Testes que falharam: $FAILED_TESTS
        - Testes pulados: $SKIPPED_TESTS
        
        DETALHES DOS TESTES FALHADOS:
        $(cat test_failures.txt)
        
        TAREFA: Analise os testes que falharam e forne√ßa:
        
        1. CLASSIFICA√á√ÉO DE CRITICIDADE:
           - ALTA: Falhas que podem causar problemas cr√≠ticos em produ√ß√£o
           - M√âDIA: Falhas que afetam funcionalidades importantes
           - BAIXA: Falhas menores ou cosm√©ticas
        
        2. AN√ÅLISE DETALHADA:
           - Identifique padr√µes nas falhas
           - Sugira poss√≠veis causas raiz
           - Indique impacto no sistema
        
        3. RECOMENDA√á√ïES:
           - Prioriza√ß√£o para corre√ß√£o
           - Sugest√µes de melhorias nos testes
           - A√ß√µes imediatas recomendadas
        
        4. RESUMO EXECUTIVO:
           - Pontua√ß√£o geral de sa√∫de dos testes (0-100)
           - Status geral do sistema
           - Pr√≥ximos passos recomendados
        
        Responda em portugu√™s brasileiro, seja conciso mas detalhado.
        EOF
        
        # Enviar para Gemini AI
        echo "üì§ Enviando dados para an√°lise..."
        
        PROMPT=$(cat analysis_prompt.txt | tr -d '\n' | sed 's/"/\\"/g')
        
        RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent" \
        -H "Content-Type: application/json" \
        -H "X-goog-api-key: $GEMINI_API_KEY" \
        -X POST \
        -d "{
              \"contents\": [
                {
                  \"parts\": [
                    {\"text\": \"$PROMPT\"}
                  ]
                }
              ]
            }")
        
        # Extrair resposta
        ANALYSIS=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Erro ao obter an√°lise do Gemini"')
        
        echo "üìã An√°lise do Gemini AI:"
        echo "$ANALYSIS"
        
        # Salvar an√°lise em arquivo
        echo "$ANALYSIS" > gemini_analysis.txt

    - name: üìä Create criticality analysis report
      if: always()
      run: |
        echo "üìä Criando relat√≥rio de an√°lise de criticidade..."
        
        # Calcular m√©tricas
        if [ "$TOTAL_TESTS" -gt 0 ]; then
          SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
        else
          SUCCESS_RATE=0
        fi
        
        # Determinar status geral
        if [ "$SUCCESS_RATE" -ge 90 ]; then
          STATUS="üü¢ EXCELENTE"
          STATUS_COLOR="#28a745"
        elif [ "$SUCCESS_RATE" -ge 75 ]; then
          STATUS="üü° BOM"
          STATUS_COLOR="#ffc107"
        elif [ "$SUCCESS_RATE" -ge 50 ]; then
          STATUS="üü† ATEN√á√ÉO"
          STATUS_COLOR="#fd7e14"
        else
          STATUS="üî¥ CR√çTICO"
          STATUS_COLOR="#dc3545"
        fi
        
        # Criar relat√≥rio HTML
        cat > results/criticality_analysis.html << EOF
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>An√°lise de Criticidade - Testes Robot Framework</title>
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .container { 
                    max-width: 1000px; 
                    margin: 0 auto; 
                    background: white; 
                    padding: 40px; 
                    border-radius: 15px; 
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                }
                h1 { 
                    color: #333; 
                    text-align: center; 
                    margin-bottom: 30px; 
                    font-size: 2.5em;
                    background: linear-gradient(45deg, #667eea, #764ba2);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                }
                .metrics-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .metric-card {
                    background: #f8f9fa;
                    border: 2px solid #e9ecef;
                    border-radius: 10px;
                    padding: 20px;
                    text-align: center;
                }
                .metric-value {
                    font-size: 2em;
                    font-weight: bold;
                    margin-bottom: 10px;
                }
                .metric-label {
                    color: #666;
                    font-size: 0.9em;
                }
                .status-badge {
                    display: inline-block;
                    padding: 10px 20px;
                    border-radius: 25px;
                    font-size: 1.2em;
                    font-weight: bold;
                    margin: 20px 0;
                }
                .analysis-section {
                    background: #f8f9fa;
                    border: 2px solid #e9ecef;
                    border-radius: 10px;
                    padding: 25px;
                    margin: 20px 0;
                }
                .analysis-section h3 {
                    color: #333;
                    margin-top: 0;
                    border-bottom: 2px solid #667eea;
                    padding-bottom: 10px;
                }
                .analysis-content {
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    border-left: 4px solid #667eea;
                    white-space: pre-wrap;
                    font-family: 'Courier New', monospace;
                    font-size: 0.9em;
                    line-height: 1.6;
                    max-height: 500px;
                    overflow-y: auto;
                }
                .footer {
                    text-align: center;
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #e9ecef;
                    color: #666;
                }
                .success-rate {
                    font-size: 3em;
                    font-weight: bold;
                    margin: 20px 0;
                    text-align: center;
                }
                .back-link {
                    text-align: center;
                    margin: 20px 0;
                }
                .back-link a {
                    color: #007bff;
                    text-decoration: none;
                    font-weight: bold;
                    padding: 10px 20px;
                    border: 2px solid #007bff;
                    border-radius: 5px;
                    transition: all 0.3s ease;
                }
                .back-link a:hover {
                    background: #007bff;
                    color: white;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîç An√°lise de Criticidade dos Testes</h1>
                
                <div class="back-link">
                    <a href="index.html">‚Üê Voltar ao Relat√≥rio Principal</a>
                </div>
                
                <div style="text-align: center;">
                    <div class="success-rate" style="color: $STATUS_COLOR;">$SUCCESS_RATE%</div>
                    <div class="status-badge" style="background: $STATUS_COLOR; color: white;">$STATUS</div>
                </div>
                
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-value">$TOTAL_TESTS</div>
                        <div class="metric-label">Total de Testes</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" style="color: #28a745;">$PASSED_TESTS</div>
                        <div class="metric-label">Testes Passaram</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" style="color: #dc3545;">$FAILED_TESTS</div>
                        <div class="metric-label">Testes Falharam</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" style="color: #ffc107;">$SKIPPED_TESTS</div>
                        <div class="metric-label">Testes Pulados</div>
                    </div>
                </div>
                
                <div class="analysis-section">
                    <h3>ü§ñ An√°lise de Criticidade - Gemini AI</h3>
                    <div class="analysis-content">
        EOF
        
        if [ -f gemini_analysis.txt ]; then
          cat gemini_analysis.txt >> results/criticality_analysis.html
        else
          echo "Nenhuma an√°lise dispon√≠vel. Todos os testes passaram ou n√£o h√° falhas para analisar." >> results/criticality_analysis.html
        fi
        
        cat >> results/criticality_analysis.html << EOF
                    </div>
                </div>
                
                <div class="analysis-section">
                    <h3>üìä Detalhes dos Testes Falhados</h3>
                    <div class="analysis-content">
        EOF
        
        if [ -f test_failures.txt ]; then
          cat test_failures.txt >> results/criticality_analysis.html
        else
          echo "Nenhum teste falhou nesta execu√ß√£o." >> results/criticality_analysis.html
        fi
        
        cat >> results/criticality_analysis.html << EOF
                    </div>
                </div>
                
                <div class="footer">
                    <p>üìÖ An√°lise gerada automaticamente em $(date)</p>
                    <p>üîÑ Atualizada a cada execu√ß√£o dos testes</p>
                    <p>ü§ñ An√°lise de criticidade por Gemini AI</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        echo "üìÑ Relat√≥rio de an√°lise criado: results/criticality_analysis.html"

    - name: üì¶ Upload to GitHub Pages
      if: always()
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./results

    - name: üì¢ Deploy to GitHub Pages
      if: always()
      id: deployment
      uses: actions/deploy-pages@v4

    - name: üìã Analysis Summary
      if: always()
      run: |
        echo "üìä RESUMO DA AN√ÅLISE:"
        echo "===================="
        echo "üìà Taxa de Sucesso: $SUCCESS_RATE%"
        echo "üìä Total de Testes: $TOTAL_TESTS"
        echo "‚úÖ Testes Passaram: $PASSED_TESTS"
        echo "‚ùå Testes Falharam: $FAILED_TESTS"
        echo "‚è≠Ô∏è Testes Pulados: $SKIPPED_TESTS"
        echo ""
        if [ -f gemini_analysis.txt ]; then
          echo "ü§ñ An√°lise do Gemini AI dispon√≠vel em:"
          echo "   - criticality_analysis.html (relat√≥rio completo)"
          echo "   - gemini_analysis.txt (an√°lise em texto)"
        else
          echo "‚úÖ Todos os testes passaram - nenhuma an√°lise necess√°ria"
        fi